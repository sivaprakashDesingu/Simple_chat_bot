{"ast":null,"code":"var _jsxFileName = \"/home/giuser/Desktop/Chatbot_Dom/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review';\nimport Sliders from './slider';\nimport \"./styles.css\";\nimport bot from './BOT.png';\nimport json from './question.json';\n\nfunction App() {\n  console.log(json);\n  var data = [{\n    id: \"13\",\n    component: React.createElement(Sliders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  }];\n\n  function reviewValue(value) {}\n\n  function getOptionAnswer(option, trigger) {\n    var options = [];\n    var item = option.split(\",\");\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      });\n    });\n    return options;\n  }\n\n  function fethQuestionUserAction(list, nextLevel, option) {\n    debugger;\n    var element = {};\n    var userAction = {};\n    element.id = list.question_id;\n    element.message = list.question;\n\n    if (nextLevel && option) {} else if (!nextLevel && !option) {\n      element.trigger = list.question_id.toString() + '-answer';\n      var options = getOptionAnswer(list.options, json[i + 1].question_id);\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options: options\n      };\n    } else if (nextLevel && !option) {}\n\n    console.log(list);\n    /*let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if ((json[i + 1] === undefined) && list.options !== undefined) {\n      // next leavel and checking where user action is there or not \n      // Scenario when question doesn't have next level of \n      //question and has action \n       if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, false)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n       } else if (list.question_type === \"RangeNumber\" ||\n        list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n          )\n         }\n      }\n        // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list)\n      }\n      } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n     // Scenatio when question doesn have next level of \n      //  question and has user action \n       if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, json[i + 1].question_id)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders\n              nextStepIs={json[i + 1].question_id}\n              getValueformSlider={reviewValue}\n              options={list.options} />\n          )\n         }\n      }\n       // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(`this has level question${i}`)\n        debugger\n        formatReadinessQuetions(list.subQuestion, list)\n       }\n     } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n      // Scenario when reapeated question without user action\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = json[i + 1].question_id\n     } else {\n       element.end = true\n     }\n     // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)*/\n  }\n\n  function formatReadinessQuetions(json, parentQuestion) {\n    //debugger;\n    var questionList = [];\n    json.map(function (list, i) {\n      if (parentQuestion !== '') {\n        fethQuestionUserAction(list);\n      } else {\n        // debugger\n        var nextLevel = json[i + 1] === undefined ? false : true;\n        var option = list.options === undefined ? false : true;\n        fethQuestionUserAction(list, nextLevel, option);\n      }\n    });\n    return questionList;\n  }\n\n  var formattedList = formatReadinessQuetions(json, '');\n  console.log(formattedList); //console.log(data)\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  });\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 190\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/giuser/Desktop/Chatbot_Dom/src/index.js"],"names":["React","ReactDOM","ChatBot","Review","Sliders","bot","json","App","console","log","data","id","component","reviewValue","value","getOptionAnswer","option","trigger","options","item","split","map","res","j","push","label","fethQuestionUserAction","list","nextLevel","element","userAction","question_id","message","question","toString","i","formatReadinessQuetions","parentQuestion","questionList","undefined","formattedList","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review'\nimport Sliders from './slider'\nimport \"./styles.css\";\nimport bot from './BOT.png'\nimport json from './question.json'\nfunction App() {\n\n  console.log(json)\n  const data = [\n    {\n      id: \"13\",\n      component: (\n        <Sliders />\n      )\n    }\n  ];\n  function reviewValue(value) {\n\n  }\n  function getOptionAnswer(option, trigger) {\n    let options = []\n    let item = option.split(\",\")\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      })\n    })\n    return options;\n  }\n\n\n  function fethQuestionUserAction(list, nextLevel, option) {\n    debugger\n    let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if (nextLevel && option) {\n\n    } else if (!nextLevel && !option) {\n      element.trigger = list.question_id.toString() + '-answer'\n      const options = getOptionAnswer(list.options, json[i + 1].question_id)\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options,\n      }\n\n    } else if (nextLevel && !option) {\n\n    }\n\n\n    console.log(list)\n    /*let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if ((json[i + 1] === undefined) && list.options !== undefined) {\n      // next leavel and checking where user action is there or not \n      // Scenario when question doesn't have next level of \n      //question and has action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, false)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n\n      } else if (list.question_type === \"RangeNumber\" ||\n        list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n          )\n\n        }\n      }\n\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list)\n      }\n\n\n    } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n\n    // Scenatio when question doesn have next level of \n      //  question and has user action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, json[i + 1].question_id)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders\n              nextStepIs={json[i + 1].question_id}\n              getValueformSlider={reviewValue}\n              options={list.options} />\n          )\n\n        }\n      }\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(`this has level question${i}`)\n        debugger\n        formatReadinessQuetions(list.subQuestion, list)\n\n      }\n\n    } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n      // Scenario when reapeated question without user action\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = json[i + 1].question_id\n\n    } else {\n\n      element.end = true\n\n    }\n\n    // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)*/\n  }\n\n\n\n  function formatReadinessQuetions(json, parentQuestion) {\n    //debugger;\n    let questionList = []\n\n    json.map(function (list, i) {\n\n      if (parentQuestion !== '') {\n        fethQuestionUserAction(list)\n      } else {\n        // debugger\n        const nextLevel = json[i + 1] === undefined ? false : true\n        const option = list.options === undefined ? false : true\n        fethQuestionUserAction(list, nextLevel, option)\n      }\n    })\n    return questionList\n  }\n\n\n\n\n\n  let formattedList = formatReadinessQuetions(json, '')\n  console.log(formattedList)\n  //console.log(data)\n  return (\n    <div className=\"App\">\n      {/* <ChatBot\n        botDelay={1500}\n        botAvatar={bot}\n        steps={formattedList}\n      /> */}\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}