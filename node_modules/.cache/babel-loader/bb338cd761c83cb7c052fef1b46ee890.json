{"ast":null,"code":"var _jsxFileName = \"/home/giuser/Desktop/Chatbot_Dom/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review';\nimport Sliders from './slider';\nimport \"./styles.css\";\nimport bot from './BOT.png';\nimport json from './question.json';\n\nfunction App() {\n  //console.log(json)\n  var data = [{\n    id: \"13\",\n    component: React.createElement(Sliders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  }];\n\n  function reviewValue(value) {}\n\n  function getOptionAnswer(option, trigger) {\n    var options = [];\n    var item = option.split(\",\");\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      });\n    });\n    return options;\n  }\n\n  function fethQuestionUserAction(question, list, nextLevel, option, index) {\n    var element = {};\n    var userAction = {};\n    element.id = list.question_id;\n    element.message = list.question;\n\n    if (nextLevel && option) {\n      element.trigger = list.question_id.toString() + '-answer';\n      var options = getOptionAnswer(list.options, question[index + 1].question_id);\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options: options\n      };\n      return {\n        element: element,\n        userAction: userAction\n      };\n    } else if (!nextLevel && option) {\n      element.trigger = list.question_id.toString() + '-answer';\n\n      var _options = getOptionAnswer(list.options, false);\n\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options: _options\n      };\n      return {\n        element: element,\n        userAction: userAction\n      };\n    } else if (nextLevel && !option) {\n      element.id = list.question_id;\n      element.message = list.question;\n      element.trigger = question[index + 1].question_id;\n      return element;\n    } else {\n      element.end = true;\n      return element;\n    } // console.log(list)\n\n    /*let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if ((json[i + 1] === undefined) && list.options !== undefined) {\n      // next leavel and checking where user action is there or not \n      // Scenario when question doesn't have next level of \n      //question and has action \n       if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, false)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n       } else if (list.question_type === \"RangeNumber\" ||\n        list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n          )\n         }\n      }\n        // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list)\n      }\n      } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n     // Scenatio when question doesn have next level of \n      //  question and has user action \n       if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, json[i + 1].question_id)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders\n              nextStepIs={json[i + 1].question_id}\n              getValueformSlider={reviewValue}\n              options={list.options} />\n          )\n         }\n      }\n       // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(`this has level question${i}`)\n        debugger\n        formatReadinessQuetions(list.subQuestion, list)\n       }\n     } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n      // Scenario when reapeated question without user action\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = json[i + 1].question_id\n     } else {\n       element.end = true\n     }\n     // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)*/\n\n  }\n\n  function fetchSubquestionsAnswer(json, list, parentQuestion, nextLevel, option, i) {\n    //debugger\n    var poption = parentQuestion.options.split(\",\");\n    poption.find(function (j) {\n      console.log(j);\n      json.forEach(function (d) {\n        debugger;\n\n        if (d.forWhichAnswer === j) {\n          debugger;\n        }\n      });\n    }); // json.find(function(d){\n    // })\n  }\n\n  var questionList = [];\n\n  function formatReadinessQuetions(json, parentQuestion) {\n    json.map(function (list, i) {\n      if (parentQuestion !== '') {\n        var nextLevel = json[i + 1] === undefined ? false : true;\n        var option = list.options === undefined ? false : true;\n        var l = fetchSubquestionsAnswer(json, list, parentQuestion, nextLevel, option, i);\n        console.log(l);\n      } else {\n        var _nextLevel = json[i + 1] === undefined ? false : true;\n\n        var _option = list.options === undefined ? false : true;\n\n        var qList = fethQuestionUserAction(json, list, _nextLevel, _option, i);\n\n        if (list.hasOwnProperty(\"subQuestion\")) {\n          console.log(\"has subquestion\");\n          formatReadinessQuetions(list.subQuestion, list);\n        }\n\n        if (qList.hasOwnProperty(\"userAction\")) {\n          questionList.push(qList.element);\n          questionList.push(qList.userAction);\n        } else {\n          questionList.push(qList);\n        }\n      }\n    });\n    return questionList;\n  }\n\n  var formattedList = formatReadinessQuetions(json, ''); //console.log(formattedList)\n  //console.log(data)\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  });\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 244\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/giuser/Desktop/Chatbot_Dom/src/index.js"],"names":["React","ReactDOM","ChatBot","Review","Sliders","bot","json","App","data","id","component","reviewValue","value","getOptionAnswer","option","trigger","options","item","split","map","res","j","push","label","fethQuestionUserAction","question","list","nextLevel","index","element","userAction","question_id","message","toString","end","fetchSubquestionsAnswer","parentQuestion","i","poption","find","console","log","forEach","d","forWhichAnswer","questionList","formatReadinessQuetions","undefined","l","qList","hasOwnProperty","subQuestion","formattedList","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review'\nimport Sliders from './slider'\nimport \"./styles.css\";\nimport bot from './BOT.png'\nimport json from './question.json'\nfunction App() {\n\n  //console.log(json)\n  const data = [\n    {\n      id: \"13\",\n      component: (\n        <Sliders />\n      )\n    }\n  ];\n  function reviewValue(value) {\n\n  }\n  function getOptionAnswer(option, trigger) {\n    let options = []\n    let item = option.split(\",\")\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      })\n    })\n    return options;\n  }\n\n\n  function fethQuestionUserAction(question, list, nextLevel, option, index) {\n\n    let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n\n    if (nextLevel && option) {\n\n      element.trigger = list.question_id.toString() + '-answer'\n      const options = getOptionAnswer(list.options, question[index + 1].question_id)\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options,\n      }\n      return { element, userAction }\n\n    } else if (!nextLevel && option) {\n\n      element.trigger = list.question_id.toString() + '-answer'\n      const options = getOptionAnswer(list.options, false)\n      userAction = {\n        id: list.question_id.toString() + '-answer',\n        options,\n      }\n      \n      return { element, userAction }\n\n    } else if (nextLevel && !option) {\n\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = question[index + 1].question_id\n\n      return element\n\n    } else {\n      element.end = true\n      return element\n    }\n\n\n   // console.log(list)\n    /*let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if ((json[i + 1] === undefined) && list.options !== undefined) {\n      // next leavel and checking where user action is there or not \n      // Scenario when question doesn't have next level of \n      //question and has action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, false)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n\n      } else if (list.question_type === \"RangeNumber\" ||\n        list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n          )\n\n        }\n      }\n\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list)\n      }\n\n\n    } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n\n    // Scenatio when question doesn have next level of \n      //  question and has user action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, json[i + 1].question_id)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders\n              nextStepIs={json[i + 1].question_id}\n              getValueformSlider={reviewValue}\n              options={list.options} />\n          )\n\n        }\n      }\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(`this has level question${i}`)\n        debugger\n        formatReadinessQuetions(list.subQuestion, list)\n\n      }\n\n    } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n      // Scenario when reapeated question without user action\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = json[i + 1].question_id\n\n    } else {\n\n      element.end = true\n\n    }\n\n    // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)*/\n  }\n\n  function fetchSubquestionsAnswer(json, list, parentQuestion, nextLevel, option, i){\n    //debugger\n    let poption = parentQuestion.options.split(\",\")\n    poption.find(function(j){\n      console.log(j)\n      json.forEach(d => {\n        debugger\n        if(d.forWhichAnswer === j){\n          debugger\n        }\n      });\n    })\n    // json.find(function(d){\n\n    // })\n  }\n\n  let questionList = []\n  function formatReadinessQuetions(json, parentQuestion) {\n\n    json.map(function (list, i) {\n      \n      if (parentQuestion !== '') {\n        let nextLevel = json[i + 1] === undefined ? false : true\n        let option = list.options === undefined ? false : true\n        let l= fetchSubquestionsAnswer(json, list, parentQuestion, nextLevel, option, i)\n        console.log(l)\n        \n      } else {\n        let nextLevel = json[i + 1] === undefined ? false : true\n        let option = list.options === undefined ? false : true\n        let qList = fethQuestionUserAction(json, list, nextLevel, option, i)\n\n        if(list.hasOwnProperty(\"subQuestion\")){\n          console.log(\"has subquestion\")\n          formatReadinessQuetions(list.subQuestion,list)\n        }\n\n        \n        if (qList.hasOwnProperty(\"userAction\")) {\n          questionList.push(qList.element)\n          questionList.push(qList.userAction)\n        } else {\n          questionList.push(qList)\n        }\n\n\n      }\n    })\n\n    return questionList\n  }\n\n\n\n\n\n  let formattedList = formatReadinessQuetions(json, '')\n  //console.log(formattedList)\n  //console.log(data)\n  return (\n    <div className=\"App\">\n      {/* <ChatBot\n        botDelay={1500}\n        botAvatar={bot}\n        steps={formattedList}\n      /> */}\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}