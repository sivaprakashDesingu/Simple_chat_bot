{"ast":null,"code":"var _jsxFileName = \"/home/giuser/Desktop/Chatbot_Dom/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review';\nimport Sliders from './slider';\nimport \"./styles.css\";\nimport bot from './BOT.png';\nimport json from './question.json';\n\nfunction App() {\n  console.log(json);\n  var data = [{\n    id: \"13\",\n    component: React.createElement(Sliders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  }];\n\n  function reviewValue(value) {}\n\n  function getOptionAnswer(option, trigger) {\n    var options = [];\n    var item = option.split(\",\");\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      });\n    });\n    return options;\n  } // function GetSubQuestion(parentOptions,subQuestion){\n  //   debugger\n  //   subQuestion.map(function (list, i) {\n  //     let element = {}\n  //     let userAction = {}\n  //     element.id = list.question_id\n  //     element.message = list.question\n  //   })\n  // }\n\n\n  var questionList = [];\n\n  function formatReadinessQuetions(json, parentQuestion) {\n    debugger;\n    json.map(function (list, i) {\n      var element = {};\n      var userAction = {};\n      element.id = list.question_id;\n      element.message = list.question;\n\n      if (parentQuestion !== '') {\n        console.log(json);\n        console.log(parentQuestion);\n      } else {\n        if (json[i + 1] === undefined && list.options !== undefined) {\n          /* next leavel and checking where user action is there or not */\n\n          /* Scenario when question doesn't have next level of \n          question and has action */\n          debugger;\n\n          if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n            element.trigger = list.question_id.toString() + '-answer';\n            var options = getOptionAnswer(list.options, false);\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              options: options\n            };\n          } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n            element.trigger = list.question_id.toString() + '-answer';\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              waitAction: true,\n              component: React.createElement(Sliders, {\n                nextStepIs: list.question_id.toString() + '-answer',\n                getValueformSlider: reviewValue,\n                options: list.options,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 89\n                },\n                __self: this\n              })\n            };\n          }\n          /* Scerio for sub question */\n\n\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n            console.log(\"this has level question\".concat(i));\n            debugger;\n            formatReadinessQuetions(list.subQuestion, list);\n          }\n        } else if (json[i + 1] !== undefined && list.options !== undefined) {\n          /* Scenatio when question doesn have next level of \n            question and has user action */\n          if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n            element.trigger = list.question_id.toString() + '-answer';\n\n            var _options = getOptionAnswer(list.options, json[i + 1].question_id);\n\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              options: _options\n            };\n          } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n            element.trigger = list.question_id.toString() + '-answer';\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              waitAction: true,\n              component: React.createElement(Sliders, {\n                nextStepIs: json[i + 1].question_id,\n                getValueformSlider: reviewValue,\n                options: list.options,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 123\n                },\n                __self: this\n              })\n            };\n          }\n          /* Scerio for sub question */\n\n\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n            console.log(\"this has level question\".concat(i));\n            debugger;\n            formatReadinessQuetions(list.subQuestion, list);\n          }\n        } else if (json[i + 1] !== undefined && list.options === undefined) {\n          /* Scenario when reapeated question without user action*/\n          element.id = list.question_id;\n          element.message = list.question;\n          element.trigger = json[i + 1].question_id;\n        } else {\n          element.end = true;\n        }\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction);\n        } else {\n          questionList.push(element);\n        } //questionList.push(element)\n\n      }\n    });\n    return questionList;\n  }\n\n  var formattedList = formatReadinessQuetions(json, '');\n  console.log(formattedList); //console.log(data)\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(ChatBot, {\n    botDelay: 1500,\n    botAvatar: bot,\n    steps: formattedList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }));\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 183\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/giuser/Desktop/Chatbot_Dom/src/index.js"],"names":["React","ReactDOM","ChatBot","Review","Sliders","bot","json","App","console","log","data","id","component","reviewValue","value","getOptionAnswer","option","trigger","options","item","split","map","res","j","push","label","questionList","formatReadinessQuetions","parentQuestion","list","i","element","userAction","question_id","message","question","undefined","question_type","toString","waitAction","subQuestion","length","end","Object","keys","formattedList","rootElement","document","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,cAAP;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;AACA,SAASC,GAAT,GAAe;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAMI,IAAI,GAAG,CACX;AACEC,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,SAAS,EACP,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ,GADW,CAAb;;AAQA,WAASC,WAAT,CAAqBC,KAArB,EAA4B,CAE3B;;AACD,WAASC,eAAT,CAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AACxC,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAX;AACAD,IAAAA,IAAI,CAACE,GAAL,CAAS,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzBL,MAAAA,OAAO,CAACM,IAAR,CAAa;AACXV,QAAAA,KAAK,EAAEQ,GADI;AAEXG,QAAAA,KAAK,EAAEH,GAFI;AAGXL,QAAAA,OAAO,EAAEA;AAHE,OAAb;AAKD,KAND;AAOA,WAAOC,OAAP;AACD,GAzBY,CA4Bb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,MAAIQ,YAAY,GAAG,EAAnB;;AACA,WAASC,uBAAT,CAAiCrB,IAAjC,EAAuCsB,cAAvC,EAAuD;AACrD;AAEAtB,IAAAA,IAAI,CAACe,GAAL,CAAS,UAAUQ,IAAV,EAAgBC,CAAhB,EAAmB;AAC1B,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,UAAU,GAAG,EAAjB;AACAD,MAAAA,OAAO,CAACpB,EAAR,GAAakB,IAAI,CAACI,WAAlB;AACAF,MAAAA,OAAO,CAACG,OAAR,GAAkBL,IAAI,CAACM,QAAvB;;AAEA,UAAIP,cAAc,KAAK,EAAvB,EAA2B;AAEzBpB,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYmB,cAAZ;AAKD,OARD,MAQO;AACL,YAAKtB,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,KAAgBM,SAAjB,IAA+BP,IAAI,CAACX,OAAL,KAAiBkB,SAApD,EAA+D;AAC7D;;AACA;;AAEA;;AACA,cAAIP,IAAI,CAACQ,aAAL,KAAuB,OAAvB,IAAkCR,IAAI,CAACQ,aAAL,KAAuB,OAA7D,EAAsE;AACpEN,YAAAA,OAAO,CAACd,OAAR,GAAkBY,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SAAhD;AACA,gBAAMpB,OAAO,GAAGH,eAAe,CAACc,IAAI,CAACX,OAAN,EAAe,KAAf,CAA/B;AACAc,YAAAA,UAAU,GAAG;AACXrB,cAAAA,EAAE,EAAEkB,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SADvB;AAEXpB,cAAAA,OAAO,EAAPA;AAFW,aAAb;AAMD,WATD,MASO,IAAIW,IAAI,CAACQ,aAAL,KAAuB,aAAvB,IACTR,IAAI,CAACQ,aAAL,KAAuB,iBADlB,EACqC;AAE1CN,YAAAA,OAAO,CAACd,OAAR,GAAkBY,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SAAhD;AACAN,YAAAA,UAAU,GAAG;AACXrB,cAAAA,EAAE,EAAEkB,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SADvB;AAEXC,cAAAA,UAAU,EAAE,IAFD;AAGX3B,cAAAA,SAAS,EACP,oBAAC,OAAD;AAAS,gBAAA,UAAU,EAAEiB,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SAAnD;AAA8D,gBAAA,kBAAkB,EAAEzB,WAAlF;AAA+F,gBAAA,OAAO,EAAEgB,IAAI,CAACX,OAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJS,aAAb;AAQD;AAGD;;;AACA,cAAIW,IAAI,CAACW,WAAL,IAAoBX,IAAI,CAACW,WAAL,CAAiBC,MAAjB,IAA2B,CAAnD,EAAsD;AACpDjC,YAAAA,OAAO,CAACC,GAAR,kCAAsCqB,CAAtC;AACA;AACAH,YAAAA,uBAAuB,CAACE,IAAI,CAACW,WAAN,EAAmBX,IAAnB,CAAvB;AAED;AAGF,SAtCD,MAsCO,IAAKvB,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,KAAgBM,SAAjB,IAA+BP,IAAI,CAACX,OAAL,KAAiBkB,SAApD,EAA+D;AAEpE;;AAGA,cAAIP,IAAI,CAACQ,aAAL,KAAuB,OAAvB,IAAkCR,IAAI,CAACQ,aAAL,KAAuB,OAA7D,EAAsE;AACpEN,YAAAA,OAAO,CAACd,OAAR,GAAkBY,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SAAhD;;AACA,gBAAMpB,QAAO,GAAGH,eAAe,CAACc,IAAI,CAACX,OAAN,EAAeZ,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,CAAYG,WAA3B,CAA/B;;AACAD,YAAAA,UAAU,GAAG;AACXrB,cAAAA,EAAE,EAAEkB,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SADvB;AAEXpB,cAAAA,OAAO,EAAPA;AAFW,aAAb;AAID,WAPD,MAOO,IAAIW,IAAI,CAACQ,aAAL,KAAuB,aAAvB,IAAwCR,IAAI,CAACQ,aAAL,KAAuB,iBAAnE,EAAsF;AAC3FN,YAAAA,OAAO,CAACd,OAAR,GAAkBY,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SAAhD;AACAN,YAAAA,UAAU,GAAG;AACXrB,cAAAA,EAAE,EAAEkB,IAAI,CAACI,WAAL,CAAiBK,QAAjB,KAA8B,SADvB;AAEXC,cAAAA,UAAU,EAAE,IAFD;AAGX3B,cAAAA,SAAS,EACP,oBAAC,OAAD;AACE,gBAAA,UAAU,EAAEN,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,CAAYG,WAD1B;AAEE,gBAAA,kBAAkB,EAAEpB,WAFtB;AAGE,gBAAA,OAAO,EAAEgB,IAAI,CAACX,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJS,aAAb;AAWD;AAED;;;AACA,cAAIW,IAAI,CAACW,WAAL,IAAoBX,IAAI,CAACW,WAAL,CAAiBC,MAAjB,IAA2B,CAAnD,EAAsD;AACpDjC,YAAAA,OAAO,CAACC,GAAR,kCAAsCqB,CAAtC;AACA;AACAH,YAAAA,uBAAuB,CAACE,IAAI,CAACW,WAAN,EAAmBX,IAAnB,CAAvB;AAED;AAEF,SAnCM,MAmCA,IAAKvB,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,KAAgBM,SAAjB,IAA+BP,IAAI,CAACX,OAAL,KAAiBkB,SAApD,EAA+D;AACpE;AACAL,UAAAA,OAAO,CAACpB,EAAR,GAAakB,IAAI,CAACI,WAAlB;AACAF,UAAAA,OAAO,CAACG,OAAR,GAAkBL,IAAI,CAACM,QAAvB;AACAJ,UAAAA,OAAO,CAACd,OAAR,GAAkBX,IAAI,CAACwB,CAAC,GAAG,CAAL,CAAJ,CAAYG,WAA9B;AAED,SANM,MAMA;AAELF,UAAAA,OAAO,CAACW,GAAR,GAAc,IAAd;AAED;;AAED,YAAIC,MAAM,CAACC,IAAP,CAAYZ,UAAZ,EAAwBS,MAAxB,KAAmC,CAAvC,EAA0C;AACxCf,UAAAA,YAAY,CAACF,IAAb,CAAkBO,OAAlB,EAA2BC,UAA3B;AACD,SAFD,MAEO;AACLN,UAAAA,YAAY,CAACF,IAAb,CAAkBO,OAAlB;AACD,SA1FI,CA2FL;;AACD;AACF,KA3GD;AA6GA,WAAOL,YAAP;AACD;;AAMD,MAAImB,aAAa,GAAGlB,uBAAuB,CAACrB,IAAD,EAAO,EAAP,CAA3C;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYoC,aAAZ,EAhKa,CAiKb;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,QAAQ,EAAE,IADZ;AAEE,IAAA,SAAS,EAAExC,GAFb;AAGE,IAAA,KAAK,EAAEwC,aAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AASD;;AAED,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACA/C,QAAQ,CAACgD,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review'\nimport Sliders from './slider'\nimport \"./styles.css\";\nimport bot from './BOT.png'\nimport json from './question.json'\nfunction App() {\n\n  console.log(json)\n  const data = [\n    {\n      id: \"13\",\n      component: (\n        <Sliders />\n      )\n    }\n  ];\n  function reviewValue(value) {\n\n  }\n  function getOptionAnswer(option, trigger) {\n    let options = []\n    let item = option.split(\",\")\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      })\n    })\n    return options;\n  }\n\n\n  // function GetSubQuestion(parentOptions,subQuestion){\n  //   debugger\n  //   subQuestion.map(function (list, i) {\n  //     let element = {}\n  //     let userAction = {}\n  //     element.id = list.question_id\n  //     element.message = list.question\n  //   })\n\n\n  // }\n  let questionList = []\n  function formatReadinessQuetions(json, parentQuestion) {\n    debugger;\n\n    json.map(function (list, i) {\n      let element = {}\n      let userAction = {}\n      element.id = list.question_id\n      element.message = list.question\n\n      if (parentQuestion !== '') {\n\n        console.log(json)\n        console.log(parentQuestion)\n\n\n\n\n      } else {\n        if ((json[i + 1] === undefined) && list.options !== undefined) {\n          /* next leavel and checking where user action is there or not */\n          /* Scenario when question doesn't have next level of \n          question and has action */\n          debugger\n          if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n            element.trigger = list.question_id.toString() + '-answer'\n            const options = getOptionAnswer(list.options, false)\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              options,\n            }\n\n\n          } else if (list.question_type === \"RangeNumber\" ||\n            list.question_type === \"RangePercentage\") {\n\n            element.trigger = list.question_id.toString() + '-answer'\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              waitAction: true,\n              component: (\n                <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n              )\n\n            }\n          }\n\n\n          /* Scerio for sub question */\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n            console.log(`this has level question${i}`)\n            debugger\n            formatReadinessQuetions(list.subQuestion, list)\n\n          }\n\n\n        } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n\n          /* Scenatio when question doesn have next level of \n            question and has user action */\n\n          if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n            element.trigger = list.question_id.toString() + '-answer'\n            const options = getOptionAnswer(list.options, json[i + 1].question_id)\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              options,\n            }\n          } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n            element.trigger = list.question_id.toString() + '-answer'\n            userAction = {\n              id: list.question_id.toString() + '-answer',\n              waitAction: true,\n              component: (\n                <Sliders\n                  nextStepIs={json[i + 1].question_id}\n                  getValueformSlider={reviewValue}\n                  options={list.options} />\n              )\n\n            }\n          }\n\n          /* Scerio for sub question */\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n            console.log(`this has level question${i}`)\n            debugger\n            formatReadinessQuetions(list.subQuestion, list)\n\n          }\n\n        } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n          /* Scenario when reapeated question without user action*/\n          element.id = list.question_id\n          element.message = list.question\n          element.trigger = json[i + 1].question_id\n\n        } else {\n\n          element.end = true\n\n        }\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction)\n        } else {\n          questionList.push(element)\n        }\n        //questionList.push(element)\n      }\n    }\n    )\n    return questionList\n  }\n\n\n\n\n\n  let formattedList = formatReadinessQuetions(json, '')\n  console.log(formattedList)\n  //console.log(data)\n  return (\n    <div className=\"App\">\n      <ChatBot\n        botDelay={1500}\n        botAvatar={bot}\n        steps={formattedList}\n      />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}