{"ast":null,"code":"var _jsxFileName = \"/home/giuser/Desktop/Chatbot_Dom/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review';\nimport Sliders from './slider';\nimport \"./styles.css\";\nimport bot from './BOT.png';\nimport json from './question.json';\n\nfunction App() {\n  console.log(json);\n  var data = [{\n    id: \"13\",\n    component: React.createElement(Sliders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  }];\n\n  function reviewValue(value) {}\n\n  function getOptionAnswer(option, trigger) {\n    var options = [];\n    var item = option.split(\",\");\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      });\n    });\n    return options;\n  }\n\n  var questionList = [];\n\n  function formatReadinessQuetions(json) {\n    json.map(function (list, i) {\n      var element = {};\n      var userAction = {};\n      element.id = list.question_id;\n      element.message = list.question;\n\n      if (json[i + 1] === undefined && list.options !== undefined) {\n        /* next leavel and checking where user action is there or not */\n\n        /* Scenario when question doesn't have next level of \n        question and has action */\n        if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n          element.trigger = list.question_id.toString() + '-answer';\n          var options = getOptionAnswer(list.options, false);\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            options: options\n          };\n\n          if (Object.keys(userAction).length !== 0) {\n            questionList.push(element, userAction);\n          } else {\n            questionList.push(element);\n          }\n        } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n          element.trigger = list.question_id.toString() + '-answer';\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            waitAction: true,\n            key: list.question_id,\n            component: React.createElement(Sliders, {\n              key: list.question_id,\n              nextStepIs: false,\n              getValueformSlider: reviewValue,\n              options: list.options,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 71\n              },\n              __self: this\n            }),\n            validator: function validator(value) {\n              return true;\n            }\n          };\n\n          if (Object.keys(userAction).length !== 0) {\n            questionList.push(element, userAction);\n          } else {\n            questionList.push(element);\n          }\n          /* Scerio for sub question */\n\n\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n            formatReadinessQuetions(list.subQuestion);\n          }\n        }\n      } else if (json[i + 1] !== undefined && list.options !== undefined) {\n        /* Scenatio when question doesn have next level of \n          question and has user action */\n        if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n          element.trigger = list.question_id.toString() + '-answer';\n\n          var _options = getOptionAnswer(list.options, json[i + 1].question_id);\n\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            options: _options\n          };\n        } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n          element.trigger = list.question_id.toString() + '-answer';\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            waitAction: true,\n            component: React.createElement(Sliders, {\n              nextStepIs: json[i + 1].question_id,\n              getValueformSlider: reviewValue,\n              options: list.options,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 112\n              },\n              __self: this\n            }),\n            validator: function validator(value) {\n              return true;\n            }\n          };\n        }\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction);\n        } else {\n          questionList.push(element);\n        }\n      } else if (json[i + 1] !== undefined && list.options === undefined) {\n        /* Scenario when reapeated question without user action*/\n        element.id = list.question_id;\n        element.message = list.question;\n        element.trigger = json[i + 1].question_id;\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction);\n        } else {\n          questionList.push(element);\n        }\n      } else {\n        element.end = true;\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction);\n        } else {\n          questionList.push(element);\n        }\n      }\n\n      if (Object.keys(userAction).length !== 0) {\n        questionList.push(element, userAction);\n      } else {\n        questionList.push(element);\n      } //questionList.push(element)\n\n    });\n    return questionList;\n  }\n\n  var formattedList = formatReadinessQuetions(json);\n  console.log(formattedList); //console.log(data)\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(ChatBot, {\n    botDelay: 1500,\n    botAvatar: bot,\n    steps: formattedList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }));\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 184\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/giuser/Desktop/Chatbot_Dom/src/index.js"],"names":["React","ReactDOM","ChatBot","Review","Sliders","bot","json","App","console","log","data","id","component","reviewValue","value","getOptionAnswer","option","trigger","options","item","split","map","res","j","push","label","questionList","formatReadinessQuetions","list","i","element","userAction","question_id","message","question","undefined","question_type","toString","Object","keys","length","waitAction","key","validator","subQuestion","end","formattedList","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review'\nimport Sliders from './slider'\nimport \"./styles.css\";\nimport bot from './BOT.png'\nimport json from './question.json'\nfunction App() {\n\n  console.log(json)\n  const data = [\n    {\n      id: \"13\",\n      component: (\n        <Sliders />\n      )\n    }\n  ];\n  function reviewValue(value) {\n\n  }\n  function getOptionAnswer(option, trigger) {\n    let options = []\n    let item = option.split(\",\")\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      })\n    })\n    return options;\n  }\n\n  let questionList = []\n  function formatReadinessQuetions(json) {\n    json.map(function (list, i) {\n      let element = {}\n      let userAction = {}\n      element.id = list.question_id\n      element.message = list.question\n\n      if ((json[i + 1] === undefined) && list.options !== undefined) {\n        /* next leavel and checking where user action is there or not */\n        /* Scenario when question doesn't have next level of \n        question and has action */\n\n        if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n          element.trigger = list.question_id.toString() + '-answer'\n          const options = getOptionAnswer(list.options, false)\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            options,\n          }\n\n          if (Object.keys(userAction).length !== 0) {\n            questionList.push(element, userAction)\n          } else {\n            questionList.push(element)\n          }\n\n        } else if (list.question_type === \"RangeNumber\" ||\n          list.question_type === \"RangePercentage\") {\n          element.trigger = list.question_id.toString() + '-answer'\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            waitAction: true,\n            key: list.question_id,\n            component: (\n              <Sliders key={list.question_id} nextStepIs={false} getValueformSlider={reviewValue} options={list.options} />\n            ),\n            validator: (value) => {\n              return true;\n            },\n\n          }\n\n          if (Object.keys(userAction).length !== 0) {\n            questionList.push(element, userAction)\n          } else {\n            questionList.push(element)\n          }\n\n          /* Scerio for sub question */\n          if (list.subQuestion && list.subQuestion.length >= 1) {\n\n            formatReadinessQuetions(list.subQuestion)\n          }\n\n        }\n\n\n      } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n\n        /* Scenatio when question doesn have next level of \n          question and has user action */\n\n        if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n          element.trigger = list.question_id.toString() + '-answer'\n          const options = getOptionAnswer(list.options, json[i + 1].question_id)\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            options,\n          }\n        } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n          element.trigger = list.question_id.toString() + '-answer'\n          userAction = {\n            id: list.question_id.toString() + '-answer',\n            waitAction: true,\n            component: (\n              <Sliders\n                nextStepIs={json[i + 1].question_id}\n                getValueformSlider={reviewValue}\n                options={list.options} />\n            ),\n            validator: (value) => {\n              return true;\n            }\n          }\n        }\n\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction)\n        } else {\n          questionList.push(element)\n        }\n\n\n      } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n        /* Scenario when reapeated question without user action*/\n        element.id = list.question_id\n        element.message = list.question\n        element.trigger = json[i + 1].question_id\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction)\n        } else {\n          questionList.push(element)\n        }\n\n      } else {\n\n        element.end = true\n\n        if (Object.keys(userAction).length !== 0) {\n          questionList.push(element, userAction)\n        } else {\n          questionList.push(element)\n        }\n\n      }\n\n      if (Object.keys(userAction).length !== 0) {\n        questionList.push(element, userAction)\n      } else {\n        questionList.push(element)\n      }\n      //questionList.push(element)\n    })\n    return questionList\n  }\n\n\n\n\n\n  let formattedList = formatReadinessQuetions(json)\n  console.log(formattedList)\n  //console.log(data)\n  return (\n    <div className=\"App\">\n      <ChatBot\n        botDelay={1500}\n        botAvatar={bot}\n        steps={formattedList}\n      />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}