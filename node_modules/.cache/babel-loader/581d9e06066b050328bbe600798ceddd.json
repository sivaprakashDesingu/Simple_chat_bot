{"ast":null,"code":"var _jsxFileName = \"/home/giuser/Desktop/Chatbot_Dom/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review';\nimport Sliders from './slider';\nimport \"./styles.css\";\nimport bot from './BOT.png';\nimport json from './question.json';\n\nfunction App() {\n  console.log(json);\n  var data = [{\n    id: \"13\",\n    component: React.createElement(Sliders, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    })\n  }];\n\n  function reviewValue(value) {}\n\n  function getOptionAnswer(option, trigger) {\n    var options = [];\n    var item = option.split(\",\");\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      });\n    });\n    return options;\n  }\n\n  function fethQuestionUserAction() {\n    var element = {};\n    var userAction = {};\n    element.id = list.question_id;\n    element.message = list.question;\n\n    if (json[i + 1] === undefined && list.options !== undefined) {\n      // next leavel and checking where user action is there or not */\n      // Scenario when question doesn't have next level of \n      //question and has action \n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer';\n        var options = getOptionAnswer(list.options, false);\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options: options\n        };\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer';\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: React.createElement(Sliders, {\n            nextStepIs: list.question_id.toString() + '-answer',\n            getValueformSlider: reviewValue,\n            options: list.options,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          })\n        };\n      } // Scerio for sub question \n\n\n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list);\n      }\n    } else if (json[i + 1] !== undefined && list.options !== undefined) {\n      // Scenatio when question doesn have next level of \n      //  question and has user action \n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer';\n\n        var _options = getOptionAnswer(list.options, json[i + 1].question_id);\n\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options: _options\n        };\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer';\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: React.createElement(Sliders, {\n            nextStepIs: json[i + 1].question_id,\n            getValueformSlider: reviewValue,\n            options: list.options,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          })\n        };\n      } // Scerio for sub question \n\n\n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(\"this has level question\".concat(i));\n        debugger;\n        formatReadinessQuetions(list.subQuestion, list);\n      }\n    } else if (json[i + 1] !== undefined && list.options === undefined) {\n      // Scenario when reapeated question without user action*/\n      element.id = list.question_id;\n      element.message = list.question;\n      element.trigger = json[i + 1].question_id;\n    } else {\n      element.end = true;\n    } // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)\n\n  }\n\n  var questionList = [];\n\n  function formatReadinessQuetions(json, parentQuestion) {\n    debugger;\n    json.map(function (list, i) {\n      if (parentQuestion !== '') {\n        console.log(json);\n        console.log(parentQuestion);\n      } else {}\n    });\n    return questionList;\n  }\n\n  var formattedList = formatReadinessQuetions(json, '');\n  console.log(formattedList); //console.log(data)\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(ChatBot, {\n    botDelay: 1500,\n    botAvatar: bot,\n    steps: formattedList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }));\n}\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 168\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/home/giuser/Desktop/Chatbot_Dom/src/index.js"],"names":["React","ReactDOM","ChatBot","Review","Sliders","bot","json","App","console","log","data","id","component","reviewValue","value","getOptionAnswer","option","trigger","options","item","split","map","res","j","push","label","fethQuestionUserAction","element","userAction","list","question_id","message","question","i","undefined","question_type","toString","waitAction","subQuestion","length","formatReadinessQuetions","end","questionList","parentQuestion","formattedList","rootElement","document","getElementById","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,cAAP;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;AACA,SAASC,GAAT,GAAe;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAMI,IAAI,GAAG,CACX;AACEC,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,SAAS,EACP,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ,GADW,CAAb;;AAQA,WAASC,WAAT,CAAqBC,KAArB,EAA4B,CAE3B;;AACD,WAASC,eAAT,CAAyBC,MAAzB,EAAiCC,OAAjC,EAA0C;AACxC,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,IAAI,GAAGH,MAAM,CAACI,KAAP,CAAa,GAAb,CAAX;AACAD,IAAAA,IAAI,CAACE,GAAL,CAAS,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AACzBL,MAAAA,OAAO,CAACM,IAAR,CAAa;AACXV,QAAAA,KAAK,EAAEQ,GADI;AAEXG,QAAAA,KAAK,EAAEH,GAFI;AAGXL,QAAAA,OAAO,EAAEA;AAHE,OAAb;AAKD,KAND;AAOA,WAAOC,OAAP;AACD;;AAGD,WAASQ,sBAAT,GAAkC;AAEhC,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,UAAU,GAAG,EAAjB;AACAD,IAAAA,OAAO,CAAChB,EAAR,GAAakB,IAAI,CAACC,WAAlB;AACAH,IAAAA,OAAO,CAACI,OAAR,GAAkBF,IAAI,CAACG,QAAvB;;AACA,QAAK1B,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,KAAgBC,SAAjB,IAA+BL,IAAI,CAACX,OAAL,KAAiBgB,SAApD,EAA+D;AAC7D;AACA;AACA;AAEA,UAAIL,IAAI,CAACM,aAAL,KAAuB,OAAvB,IAAkCN,IAAI,CAACM,aAAL,KAAuB,OAA7D,EAAsE;AACpER,QAAAA,OAAO,CAACV,OAAR,GAAkBY,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SAAhD;AACA,YAAMlB,OAAO,GAAGH,eAAe,CAACc,IAAI,CAACX,OAAN,EAAe,KAAf,CAA/B;AACAU,QAAAA,UAAU,GAAG;AACXjB,UAAAA,EAAE,EAAEkB,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SADvB;AAEXlB,UAAAA,OAAO,EAAPA;AAFW,SAAb;AAKD,OARD,MAQO,IAAIW,IAAI,CAACM,aAAL,KAAuB,aAAvB,IACTN,IAAI,CAACM,aAAL,KAAuB,iBADlB,EACqC;AAC1CR,QAAAA,OAAO,CAACV,OAAR,GAAkBY,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SAAhD;AACAR,QAAAA,UAAU,GAAG;AACXjB,UAAAA,EAAE,EAAEkB,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SADvB;AAEXC,UAAAA,UAAU,EAAE,IAFD;AAGXzB,UAAAA,SAAS,EACP,oBAAC,OAAD;AAAS,YAAA,UAAU,EAAEiB,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SAAnD;AAA8D,YAAA,kBAAkB,EAAEvB,WAAlF;AAA+F,YAAA,OAAO,EAAEgB,IAAI,CAACX,OAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJS,SAAb;AAQD,OAxB4D,CA2B7D;;;AACA,UAAIW,IAAI,CAACS,WAAL,IAAoBT,IAAI,CAACS,WAAL,CAAiBC,MAAjB,IAA2B,CAAnD,EAAsD;AACpDC,QAAAA,uBAAuB,CAACX,IAAI,CAACS,WAAN,EAAmBT,IAAnB,CAAvB;AACD;AAGF,KAjCD,MAiCO,IAAKvB,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,KAAgBC,SAAjB,IAA+BL,IAAI,CAACX,OAAL,KAAiBgB,SAApD,EAA+D;AAEtE;AACE;AAEA,UAAIL,IAAI,CAACM,aAAL,KAAuB,OAAvB,IAAkCN,IAAI,CAACM,aAAL,KAAuB,OAA7D,EAAsE;AACpER,QAAAA,OAAO,CAACV,OAAR,GAAkBY,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SAAhD;;AACA,YAAMlB,QAAO,GAAGH,eAAe,CAACc,IAAI,CAACX,OAAN,EAAeZ,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,CAAYH,WAA3B,CAA/B;;AACAF,QAAAA,UAAU,GAAG;AACXjB,UAAAA,EAAE,EAAEkB,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SADvB;AAEXlB,UAAAA,OAAO,EAAPA;AAFW,SAAb;AAID,OAPD,MAOO,IAAIW,IAAI,CAACM,aAAL,KAAuB,aAAvB,IAAwCN,IAAI,CAACM,aAAL,KAAuB,iBAAnE,EAAsF;AAC3FR,QAAAA,OAAO,CAACV,OAAR,GAAkBY,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SAAhD;AACAR,QAAAA,UAAU,GAAG;AACXjB,UAAAA,EAAE,EAAEkB,IAAI,CAACC,WAAL,CAAiBM,QAAjB,KAA8B,SADvB;AAEXC,UAAAA,UAAU,EAAE,IAFD;AAGXzB,UAAAA,SAAS,EACP,oBAAC,OAAD;AACE,YAAA,UAAU,EAAEN,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,CAAYH,WAD1B;AAEE,YAAA,kBAAkB,EAAEjB,WAFtB;AAGE,YAAA,OAAO,EAAEgB,IAAI,CAACX,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJS,SAAb;AAWD,OAzBmE,CA2BpE;;;AACA,UAAIW,IAAI,CAACS,WAAL,IAAoBT,IAAI,CAACS,WAAL,CAAiBC,MAAjB,IAA2B,CAAnD,EAAsD;AACpD/B,QAAAA,OAAO,CAACC,GAAR,kCAAsCwB,CAAtC;AACA;AACAO,QAAAA,uBAAuB,CAACX,IAAI,CAACS,WAAN,EAAmBT,IAAnB,CAAvB;AAED;AAEF,KAnCM,MAmCA,IAAKvB,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,KAAgBC,SAAjB,IAA+BL,IAAI,CAACX,OAAL,KAAiBgB,SAApD,EAA+D;AACpE;AACAP,MAAAA,OAAO,CAAChB,EAAR,GAAakB,IAAI,CAACC,WAAlB;AACAH,MAAAA,OAAO,CAACI,OAAR,GAAkBF,IAAI,CAACG,QAAvB;AACAL,MAAAA,OAAO,CAACV,OAAR,GAAkBX,IAAI,CAAC2B,CAAC,GAAG,CAAL,CAAJ,CAAYH,WAA9B;AAED,KANM,MAMA;AAELH,MAAAA,OAAO,CAACc,GAAR,GAAc,IAAd;AAED,KApF+B,CAsFhC;AACA;AACA;AACA;AACA;AACA;;AACD;;AAGD,MAAIC,YAAY,GAAG,EAAnB;;AACA,WAASF,uBAAT,CAAiClC,IAAjC,EAAuCqC,cAAvC,EAAuD;AACrD;AAEArC,IAAAA,IAAI,CAACe,GAAL,CAAS,UAAUQ,IAAV,EAAgBI,CAAhB,EAAmB;AAC1B,UAAIU,cAAc,KAAK,EAAvB,EAA2B;AACzBnC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYkC,cAAZ;AAED,OAJD,MAIO,CAEN;AACF,KARD;AAUA,WAAOD,YAAP;AACD;;AAMD,MAAIE,aAAa,GAAGJ,uBAAuB,CAAClC,IAAD,EAAO,EAAP,CAA3C;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYmC,aAAZ,EAjJa,CAkJb;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,QAAQ,EAAE,IADZ;AAEE,IAAA,SAAS,EAAEvC,GAFb;AAGE,IAAA,KAAK,EAAEuC,aAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AASD;;AAED,IAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACA9C,QAAQ,CAAC+C,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBH,WAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ChatBot from 'react-simple-chatbot';\nimport Review from './Review'\nimport Sliders from './slider'\nimport \"./styles.css\";\nimport bot from './BOT.png'\nimport json from './question.json'\nfunction App() {\n\n  console.log(json)\n  const data = [\n    {\n      id: \"13\",\n      component: (\n        <Sliders />\n      )\n    }\n  ];\n  function reviewValue(value) {\n\n  }\n  function getOptionAnswer(option, trigger) {\n    let options = []\n    let item = option.split(\",\")\n    item.map(function (res, j) {\n      options.push({\n        value: res,\n        label: res,\n        trigger: trigger\n      })\n    })\n    return options;\n  }\n\n\n  function fethQuestionUserAction() {\n\n    let element = {}\n    let userAction = {}\n    element.id = list.question_id\n    element.message = list.question\n    if ((json[i + 1] === undefined) && list.options !== undefined) {\n      // next leavel and checking where user action is there or not */\n      // Scenario when question doesn't have next level of \n      //question and has action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, false)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n\n      } else if (list.question_type === \"RangeNumber\" ||\n        list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders nextStepIs={list.question_id.toString() + '-answer'} getValueformSlider={reviewValue} options={list.options} />\n          )\n\n        }\n      }\n\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        formatReadinessQuetions(list.subQuestion, list)\n      }\n\n\n    } else if ((json[i + 1] !== undefined) && list.options !== undefined) {\n\n    // Scenatio when question doesn have next level of \n      //  question and has user action \n\n      if (list.question_type === \"MULTI\" || list.question_type === \"YESNO\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        const options = getOptionAnswer(list.options, json[i + 1].question_id)\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          options,\n        }\n      } else if (list.question_type === \"RangeNumber\" || list.question_type === \"RangePercentage\") {\n        element.trigger = list.question_id.toString() + '-answer'\n        userAction = {\n          id: list.question_id.toString() + '-answer',\n          waitAction: true,\n          component: (\n            <Sliders\n              nextStepIs={json[i + 1].question_id}\n              getValueformSlider={reviewValue}\n              options={list.options} />\n          )\n\n        }\n      }\n\n      // Scerio for sub question \n      if (list.subQuestion && list.subQuestion.length >= 1) {\n        console.log(`this has level question${i}`)\n        debugger\n        formatReadinessQuetions(list.subQuestion, list)\n\n      }\n\n    } else if ((json[i + 1] !== undefined) && list.options === undefined) {\n      // Scenario when reapeated question without user action*/\n      element.id = list.question_id\n      element.message = list.question\n      element.trigger = json[i + 1].question_id\n\n    } else {\n\n      element.end = true\n\n    }\n\n    // if (Object.keys(userAction).length !== 0) {\n    //   questionList.push(element, userAction)\n    // } else {\n    //   questionList.push(element)\n    // }\n    //questionList.push(element)\n  }\n\n\n  let questionList = []\n  function formatReadinessQuetions(json, parentQuestion) {\n    debugger;\n\n    json.map(function (list, i) {\n      if (parentQuestion !== '') {\n        console.log(json)\n        console.log(parentQuestion)\n\n      } else {\n\n      }\n    }\n    )\n    return questionList\n  }\n\n\n\n\n\n  let formattedList = formatReadinessQuetions(json, '')\n  console.log(formattedList)\n  //console.log(data)\n  return (\n    <div className=\"App\">\n      <ChatBot\n        botDelay={1500}\n        botAvatar={bot}\n        steps={formattedList}\n      />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}